<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Ubrigens</title>
    <link href="https://ubrigens.com/atom.xml" rel="self" />
    <link href="https://ubrigens.com" />
    <id>https://ubrigens.com/atom.xml</id>
    <author>
        <name>Jakob Rieck</name>
        
        <email>jakobrieck+blog@gmail.com</email>
        
    </author>
    <updated>2020-04-27T00:00:00Z</updated>
    <entry>
    <title>Exploring Sandbox Coverage on macOS</title>
    <link href="https://ubrigens.com/posts/sandbox_coverage.html" />
    <id>https://ubrigens.com/posts/sandbox_coverage.html</id>
    <published>2020-04-27T00:00:00Z</published>
    <updated>2020-04-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        Exploring Sandbox Coverage on macOS
        <span class="date">April 27, 2020</span>
    </h2>
    <blockquote>
<p><strong>Note</strong>: This article describes my approach to <em>analyse the quality of sandbox profiles on macOS</em>. This is an important topic, as the sandbox is the core technology making sure apps and programs do only what they are supposed to do. There are a number of limitations and problems with my approach. This article is therefore not about the concrete results I got, but instead about how to approach this problem and what I’ve learned so far.</p>
</blockquote>
<p>The <em>principle of least privilege</em> <a href="https://dl.acm.org/doi/10.1145/361011.361067">states</a> that programs should operate with the least amount of privilege necessary to complete their task. Sandboxes are supposed to implement this principle, though it is often unclear how effectively they do their jobs. This article deals with this topic.</p>
<p>App Sandboxing on macOS is configured using <em>entitlements</em>. There are only relatively few coarse-grained entitlements, but thousands of different apps. Each app has its own unique resource requirements. Because the abstract base profile underlying the App Sandbox encapsulates <em>all</em> permissible behaviour for all apps, it cannot perfectly fit each <em>individual</em> app. As such, it is to be expected that there are rules unused by some apps, but that are used by others. Accepting this limitation means that individual profiles are bound to be overprivileged: there is always wiggle room for apps to perform actions they were not intended to perform. This is the reality inherent in any sandboxing solution: there’s always a tradeoff between ease-of-use and flexibility.</p>
<p>Another question remains: Are there completely unused rules in the abstract base profile? These rules are included in every application’s sandbox profile and therefore deserve special attention: They could be either <em>redundant</em> or <em>overly permissive</em> and can be removed in both cases, reducing complexity without breaking valid functionality.</p>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_coverage/coverage_motivation.svg" alt="Overview: The abstract base profile underlies all application sandboxing profiles" />
<figcaption aria-hidden="true">Overview: The abstract base profile underlies all application sandboxing profiles</figcaption>
</figure>
<p>On macOS, the App Sandbox’s ruleset is a whitelist of allowed functionality. Unused, non-redundant sandbox rules could pose security risks if they allow resource accesses that are not needed at runtime.</p>
<p>Note: sandbox profiles with no unused rules are not automatically <em>appropriate</em>. For instance, the profile consisting of just the single rule <code>(allow default)</code> is not a sensible sandbox configuration, even though it contains no unused rules.</p>
<h2 id="approach">Approach</h2>
<p>Knowing which rules are <em>not used</em> requires knowing which ones <em>are used</em>. We are interested in something akin to code coverage, albeit for sandbox profiles. Let’s be pragmatic and call it <em>sandbox coverage</em>.</p>
<p>Here’s what I did to approach the problem:</p>
<ol type="1">
<li><strong>Turn on sandbox logging for all rules</strong></br>
<code>Sandbox.kext</code> logs its decisions to the syslog. I tried to match these logs back to the rules that generated them. Logging is not enabled for all rules by default.</li>
<li><strong>Collect sandbox traces (log entries)</strong></br>
Sandbox logs are only generated at runtime. To collect them, we need to <em>run</em> and thoroughly <em>test</em> apps to reach as much programmed functionality as possible.</li>
<li><strong>Match sandbox traces to sandbox rules</strong></br>
I built a matcher to figure out <em>which sandbox rule</em> was responsible for <em>which log entry</em>.</li>
<li><strong>Generalise matches to abstract base profile</strong></br>
Results from the previous step are tied to a concrete sandboxing profile. We are mainly interested in which rules from the underlying abstract <code>application.sb</code> profile are not used. In this step, we generalise our results using simple heuristics.</li>
</ol>
<h3 id="sandbox-logs">Sandbox Logs</h3>
<p>Apple’s sandbox logs its decisions to the system log. Each log entry consists of the decision taken (<code>allow</code> or <code>deny</code>), the affected sandbox operation name and a string describing the resource accessed. Open up <code>Console.app</code>, wait a few seconds and you will see examples such as</p>
<pre><code>Sandbox: systemsoundserve(252) deny(1) file-read-data /Library/Preferences/Logging/com.apple.diagnosticd.filter.plist</code></pre>
<p>By default only <code>deny</code> decisions are logged. <code>allow</code> decisions are however much more interesting because the App Sandbox uses a whitelisting approach. To <strong>enable comprehensive sandbox logging</strong>, we can use <a href="https://github.com/0xbf00/simbple"><code>simbple</code></a> to add the <code>report</code> modifier to all <code>allow</code> rules. Modified profiles will look as follows</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="https://ubrigens.com#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># The --patch flag adds report modifiers to all allow rules</span></span>
<span id="cb2-2"><a href="https://ubrigens.com#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./simbple ~/Library/Containers/com.apple.calculator/Container.plist <span class="at">--patch</span> <span class="kw">|</span> <span class="fu">tail</span> <span class="at">-n</span> 9</span>
<span id="cb2-3"><a href="https://ubrigens.com#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">(</span><span class="ex">allow</span></span>
<span id="cb2-4"><a href="https://ubrigens.com#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="ex">mach-lookup</span></span>
<span id="cb2-5"><a href="https://ubrigens.com#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">(</span><span class="ex">global-name</span> <span class="st">&quot;com.apple.mobile.keybagd.xpc&quot;</span><span class="kw">)</span></span>
<span id="cb2-6"><a href="https://ubrigens.com#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">(</span><span class="ex">with</span> report<span class="kw">))</span> <span class="co"># Modifier added by simbple</span></span>
<span id="cb2-7"><a href="https://ubrigens.com#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">(</span><span class="ex">allow</span></span>
<span id="cb2-8"><a href="https://ubrigens.com#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="ex">mach-lookup</span></span>
<span id="cb2-9"><a href="https://ubrigens.com#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">(</span><span class="ex">global-name</span> <span class="st">&quot;com.apple.backgroundtaskmanagementagent&quot;</span><span class="kw">)</span></span>
<span id="cb2-10"><a href="https://ubrigens.com#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">(</span><span class="ex">with</span> report<span class="kw">))</span> <span class="co"># Added by simbple</span></span></code></pre></div>
<p>To <strong>collect sandbox traces / log entries</strong>, all that is left to do is running the target program with the modified sandbox profile. To do this, simply compile the new sandbox profile and inject it into the app’s <code>Container.plist</code> file. How <em>complete</em> your results are depends on your testing methodology. Ideally, you’d want to exhaustively test apps and trigger all functionality. This might be feasible when you are dealing with only few simple apps, but does not scale at all. Products such as <a href="https://www.froglogic.com/squish/">Squish</a> can script GUIs on macOS, but they are geared towards developers with source code access and break down quickly when used on third-party code. I ended up simply opening apps and letting them run idly for sixty seconds. In addition, I tested a small set of apps more thoroughly to see how results would look like with a more comprehensive testing strategy.</p>
<p>Sandbox logs after parsing and cleanup look like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb3-1"><a href="https://ubrigens.com#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb3-2"><a href="https://ubrigens.com#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;action&quot;</span><span class="fu">:</span> <span class="st">&quot;allow&quot;</span><span class="fu">,</span></span>
<span id="cb3-3"><a href="https://ubrigens.com#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;argument&quot;</span><span class="fu">:</span> <span class="st">&quot;/System/Library/Frameworks/GSS.framework/Versions/A/GSS&quot;</span><span class="fu">,</span></span>
<span id="cb3-4"><a href="https://ubrigens.com#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;operation&quot;</span><span class="fu">:</span> <span class="st">&quot;file-read-metadata&quot;</span></span>
<span id="cb3-5"><a href="https://ubrigens.com#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span><span class="er">,</span></span>
<span id="cb3-6"><a href="https://ubrigens.com#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb3-7"><a href="https://ubrigens.com#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;action&quot;</span><span class="fu">:</span> <span class="st">&quot;allow&quot;</span><span class="fu">,</span></span>
<span id="cb3-8"><a href="https://ubrigens.com#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;argument&quot;</span><span class="fu">:</span> <span class="st">&quot;/Applications/Calculator.app&quot;</span><span class="fu">,</span></span>
<span id="cb3-9"><a href="https://ubrigens.com#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;operation&quot;</span><span class="fu">:</span> <span class="st">&quot;file-read-data&quot;</span></span>
<span id="cb3-10"><a href="https://ubrigens.com#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span><span class="er">,</span></span></code></pre></div>
<h3 id="rule-matching">Rule Matching</h3>
<p>The general order of evaluation for sandbox profiles is from beginning to end. Later rules <em>can</em> modify earlier ones, but don’t always (there are rules here but they don’t matter for this discussion). Earlier rules <strong>never</strong> modify later ones. When you remove the last rule in a sandbox profile, a sandbox exception might be removed (last rule was a <code>deny</code> rule) or added (last rule was an <code>allow</code> rule).</p>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_coverage/rule_matching.svg" alt="Overview: Matching Architecture" />
<figcaption aria-hidden="true">Overview: Matching Architecture</figcaption>
</figure>
<p>Using this knowledge, we can build a <em>sandbox oracle</em> to figure out <em>which rule was responsible for a given sandbox decision</em>: given a decision from the sandbox logs and the corresponding sandbox profile, we repeatedly remove the last rule from the profile and check if the sandbox would decide differently. Once it does, we know that the last removed rule is responsible for the original decision.</p>
<p>Let’s consider the following example. According to the log entry, the sandbox allowed the program to read <code>a.dylib</code>. Looking at the example ruleset, it should be clear that the <code>device-microphone</code> rule has nothing to do with our log entry, hence nothing changes when removing this rule. Once we remove the next rule however, only the <code>(deny default)</code> rule will remain. Given this profile, the sandbox will <em>deny</em> the request. At this point, we know that the second rule is responsible for the log entry.</p>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_coverage/matcher_example.svg" alt="Example for matching" />
<figcaption aria-hidden="true">Example for matching</figcaption>
</figure>
<p>The basis of the sandbox oracle is <code>sandbox_check</code>, a pretty much undocumented function. Trying to work around some of its limitations, I wrote functionality that would actually trigger sandbox checks to see what is allowed and what’s not. Check out <a href="https://github.com/0xbf00/macos-sandbox-coverage">the code</a> for more infos.</p>
<h3 id="generalising-results">Generalising results</h3>
<p>Starting out, we were interested in which rules of the <em>abstract</em> base profile (<code>application.sb</code>) are unused. Up until now however, our results are tied to the <em>specific</em> application sandboxing profile.</p>
<p>We can generalise our results by mapping them onto (a generic instantiation of) the <code>application.sb</code> profile:</p>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_coverage/profile_matching.svg" alt="Overview: Generalising Sandbox Profiles" />
<figcaption aria-hidden="true">Overview: Generalising Sandbox Profiles</figcaption>
</figure>
<p>To do this, we first craft a generic container metadata file where all sandbox parameters are set to generic placeholder values, all non-essential sandbox snippets are removed and only the <code>com.apple.security.app-sandbox</code> entitlement is specified (<strong>1</strong>). We then use <a href="https://github.com/0xbf00/simbple"><code>simbple</code></a> to generate the corresponding generic sandbox profile (<strong>2</strong>).</p>
<p>The application’s sandbox profile (<strong>3</strong>) is used during matching. To generalise the results, we compute a normalised application sandboxing profile (<strong>5</strong>) by “normalising” the app’s <code>Container.plist</code> file (<strong>4</strong>). In contrast to (<strong>1</strong>), we leave entitlements and sandbox snippets as they are.</p>
<p>We then create a mapping between the application’s sandbox profile and its normalised version (<strong>6</strong>). This can be done rather easily, because the order of rules is identical in both. Finally, we create a second mapping between the normalised version and the generic sandbox profile (<strong>7</strong>), which is possible because both use the same generic placeholder values. This mapping is not 1:1, because sandbox snippets are missing from the generic profile.</p>
<p>With these mappings, we can now transfer our matching result from the application sandbox profile to the generic sandbox profile.</p>
<h2 id="results">Results</h2>
<p>I ran the sandbox coverage analysis on 6 703 free apps from the Mac App Store. Each app was opened, left running for 60 seconds and was then closed again. In total, I collected just shy of 17 million sandbox log statements. Of these, a little over 4% of logs yielded inconsistent results (sandbox decision during matching differs from original) and could not be matched. There are a number of reasons for why this was happening. See the next section for a discussion of the problems of this approach.</p>
<p>In my automated tests, sandbox coverage for individual apps never exceeded 14.5%. Apps I <em>manually interacted with</em> had slightly higher coverage at roughly 16%. Nevertheless, in my work, I could only find proof that roughly one out of five sandbox rules was actually used at runtime. Even if we assume that errors in the project mean only 50% of rules were captured or could be matched, that still means that the majority of sandbox rules are not needed and the resulting sandboxing profiles are needlessly complicated.</p>
<p>Though the strategy to get logs for individual apps was very basic, generalising and combining all results yielded higher sandbox coverage statistics for the abstract base profile. Here, 28% of all rules are used. Again, the majority of rules appear <em>not to be used by any app</em>. To visualise the results, you could for instance colour every rule that was used in green:</p>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_coverage/coverage_visualisation.png" alt="Example Visualisation of Sandbox Coverage" />
<figcaption aria-hidden="true">Example Visualisation of Sandbox Coverage</figcaption>
</figure>
<p>Knowing what parts of a sandboxing profile are actually used is very helpful. For instance, it allows you to harden your own machine!</p>
<h2 id="problems-and-limitations">Problems and Limitations</h2>
<p>If you’ve read this far, you might have already thought of some issues with my approach. Let me know <a href="https://twitter.com/0xdead10cc">on Twitter</a> if you have anything to add to this list:</p>
<ul>
<li><strong>TOCTTOU (Time of check to time of use)</strong>: As rule matching is performed <em>post facto</em>, the system state underlying a particular decision could have already changed when we get around to matching. We can detect <em>inconsistent</em> matches, where the decision the matcher returns differs from the original decision. It is however also possible that a <em>different rule</em> produces the same decision during matching, making it impossible to guarantee correctness of matches.</li>
<li><strong>Incompleteness of dynamic analysis</strong>: Dynamic analysis is incomplete by definition; there are always code paths your testing will not hit. Furthermore, existing tools to automatically test apps are geared towards developers with source code access and cannot be used on random third-party apps.</li>
<li><strong>Incomplete sandbox logs</strong>: Some sandbox operations don’t produce logging output (e.g. <code>device-microphone</code>), even when explicitly instructed to. For other operations, only some of the parameters influencing the sandbox decision are logged (e.g. only the filename, not any flags).</li>
<li><strong>Impractical APIs to query sandboxing</strong>: <code>sandbox_check</code> was not designed for what I am using it for here. Some of its limitations I could work around, some I could not.</li>
<li><strong>Incomplete dataset</strong>: There is no single repository of every Mac app in existence. In my work, I looked at free apps only. Paid apps might behave differently, although I would bet against it.</li>
</ul>
<p>These limitations are pretty fundamental. They are unfortunately inherent in any approach that tries to perform matching <em>post facto</em> in <em>user space</em>.</p>
<h2 id="next-steps-move-matching-to-the-kernel">Next steps: Move matching to the kernel</h2>
<p>I think it is possible to solve most limitations by performing the matching in the kernel at the time the sandbox makes its decision. As you know, sandboxing is implemented in a kernel extension (<code>Sandbox.kext</code>). This kernel extension implements a policy module that is called upon by the mandatory access control framework embedded in XNU. The center piece of this framework is the <code>MAC_CHECK</code> macro, defined in <a href="https://opensource.apple.com/source/xnu/xnu-6153.11.26/security/mac_internal.h.auto.html">security/mac_internal.h</a>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="https://ubrigens.com#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb4-2"><a href="https://ubrigens.com#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co"> * MAC_CHECK performs the designated check by walking the policy</span></span>
<span id="cb4-3"><a href="https://ubrigens.com#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"> * module list and checking with each as to how it feels about the</span></span>
<span id="cb4-4"><a href="https://ubrigens.com#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co"> * request.  Note that it returns its value via 'error' in the scope</span></span>
<span id="cb4-5"><a href="https://ubrigens.com#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co"> * of the caller.</span></span>
<span id="cb4-6"><a href="https://ubrigens.com#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb4-7"><a href="https://ubrigens.com#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#define MAC_CHECK</span><span class="op">(</span><span class="pp">check</span><span class="op">,</span><span class="pp"> args</span><span class="op">...)</span><span class="pp"> </span><span class="cf">do</span><span class="pp"> </span><span class="op">{</span><span class="pp">                                  </span><span class="op">\</span></span>
<span id="cb4-8"><a href="https://ubrigens.com#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="pp">	</span><span class="kw">struct</span><span class="pp"> mac_policy_conf </span><span class="op">*</span><span class="pp">mpc</span><span class="op">;</span><span class="pp">                                    </span><span class="op">\</span></span>
<span id="cb4-9"><a href="https://ubrigens.com#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="pp">	</span>u_int<span class="pp"> i</span><span class="op">;</span><span class="pp">                                                        </span><span class="op">\</span></span>
<span id="cb4-10"><a href="https://ubrigens.com#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span></code></pre></div>
<p>It should be possible to replicate the matching logic inside of this macro. Here we would repeatedly query <code>Sandbox.kext</code> for its decision while changing out a processes’ sandbox profile underneath the kernel extension.</p>
<p>For this to work, we would need</p>
<ol type="1">
<li>A primitive to change out the installed sandbox profile for a process. Since we are working in kernel space, it should be possible to simply mess with <code>Sandbox.kext</code>’s memory directly.</li>
<li>A syscall for a user space process to send a list of <code>n</code> compiled sandbox profiles to the kernel, where <code>n</code> is the number of rules in the complete profile. The kernel would install the complete profile to start and use the rest in the modified <code>MAC_CHECK</code> macro, similarly to how matching works in user space.</li>
<li>A method for the kernel to transmit results back to user space</li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>The Long And Winding Road To Safety: Three Ways to Bypass Sandbox Initialisation on macOS</title>
    <link href="https://ubrigens.com/posts/sandbox_initialisation_bypasses.html" />
    <id>https://ubrigens.com/posts/sandbox_initialisation_bypasses.html</id>
    <published>2020-03-18T00:00:00Z</published>
    <updated>2020-03-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        The Long And Winding Road To Safety: Three Ways to Bypass Sandbox Initialisation on macOS
        <span class="date">March 18, 2020</span>
    </h2>
    <p>From <a href="https://ubrigens.com/posts/sandbox_tour.html">my first post</a> about sandboxing on macOS:</p>
<blockquote>
<p>All programs are initially launched <em>non-sandboxed</em>. This little-known fact, which is completely absent from all official documentation, is the achilles heel of the whole system. Under <em>normal</em> circumstances, the sandbox is initialised before transfer is controlled to application code. However, because initialisation happens in the context of the application itself, there is precious little room for error. As it stands, there is no process to ensure applications, whose metadata suggest they should run sandboxed, actually run sandboxed.</p>
</blockquote>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox/initialisation_bypasses_overview.svg" alt="Overview of App Sandbox Initialisation Bypasses" />
<figcaption aria-hidden="true">Overview of App Sandbox Initialisation Bypasses</figcaption>
</figure>
<p>In my opinion, application sandboxing on macOS should offer <em>declarative</em> security. If an application or binary is properly code-signed and contains entitlements suggesting it runs sandboxed, there should be no way for that app or binary to run unsandboxed. After all, the case for application sandboxing to <em>contain potentially malicious apps</em> is much stronger than is the case for sandboxing to <em>guard against exploits targeting third-party apps</em> (are there any such documented cases?).</p>
<p>Currently though, the App Sandbox does not offer declarative security. In today’s post, I will show you three different ways for malicious developers to bypass sandbox initialisation. The graphic above gives you an idea about the structure of this post. Let’s get started.</p>
<h2 id="no-dyld-no-sandbox">No <code>dyld</code>, No Sandbox</h2>
<p><code>dyld</code>, macOS’s dynamic linker, starts the process of sandboxing an app. It does this by calling the initialiser for <code>libSystem</code>, which in turn <a href="https://opensource.apple.com/source/Libsystem/Libsystem-1281/init.c.auto.html">calls on <code>libsystem_secinit.dylib</code></a>. If your program does not use <code>dyld</code> – in other words, is statically linked – this code is never called. Sandboxing will never be activated, irrespective of the entitlements of the program.</p>
<p>The kernel source code responsible for loading Mach-O programs is located in <code>parse_machfile</code> in <code>bsd/kern/mach_loader.c</code>. If a binary contains neither <code>LC_MAIN</code> nor <code>LC_LOAD_DYLINKER</code> load commands, its entry point will be called directly, without going through <code>dyld</code>.</p>
<p>Creating <a href="https://github.com/0xbf00/pocs/tree/master/no-dyld-no-sandbox">the PoC</a> took me longer than I’d initially thought. As far as I know, standard tools on macOS do not support creating statically linked programs. In the end, I made some changes to <a href="https://github.com/stek29/minmacho"><code>minmacho</code></a> to produce the proof of concept. <a href="https://github.com/0xbf00/pocs/tree/master/no-dyld-no-sandbox">The resulting program</a> is incredibly simple and does nothing but spin in a tight loop. It is properly code signed with the sandboxing entitlement but does not run sandboxed.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="https://ubrigens.com#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> asctl sandbox check <span class="at">--pid</span> 23811</span>
<span id="cb1-2"><a href="https://ubrigens.com#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">/Users/jakob/Programming/minmacho/a.out:</span></span>
<span id="cb1-3"><a href="https://ubrigens.com#cb1-3" aria-hidden="true" tabindex="-1"></a>	<span class="ex">signed</span> with App Sandbox entitlements</span>
<span id="cb1-4"><a href="https://ubrigens.com#cb1-4" aria-hidden="true" tabindex="-1"></a>	<span class="ex">running</span> without App Sandbox enabled</span>
<span id="cb1-5"><a href="https://ubrigens.com#cb1-5" aria-hidden="true" tabindex="-1"></a>	<span class="ex">running</span> unsandboxed</span></code></pre></div>
<h2 id="nothing-to-see-here-dyld-interposing-strikes-again">Nothing to See Here: <code>dyld</code> Interposing Strikes Again</h2>
<p>Let’s assume for the moment that we are dealing with a dynamically-linked program. In this case, <code>dyld</code> gets called to load the target program. Towards the end, it will initialise all loaded libraries, starting with <code>libSystem</code>. <code>libSystem</code> in turn <a href="https://opensource.apple.com/source/Libsystem/Libsystem-1281/init.c.auto.html">calls on</a> <code>libsystem_secinit.dylib</code> to initialise sandboxing.</p>
<p>This library first extracts and decodes the host programs’ entitlements. Reverse-engineering <code>libsystem_secinit.dylib</code>, you’ll find the library <a href="https://github.com/0xbf00/libsecinit/blob/24962765158a9e0330f2e8732a4738b5c888d2c9/src/libsecinit.c#L142">uses the following logic</a> for this purpose:</p>
<pre><code>xpc_object_t entitlements = xpc_copy_entitlements_for_pid(getpid());

if (entitlements) {
    const void* data = xpc_data_get_bytes_ptr(entitlements);
    size_t len = xpc_data_get_length(entitlements);

    ctx-&gt;entitlements = xpc_create_from_plist(data, len);
    xpc_release(entitlements);
}</code></pre>
<p>Here you can see the library uses <code>xpc_copy_entitlements_for_pid</code> to get the program’s raw entitlements. For apps without entitlements, this function returns <code>NULL</code> and the sandboxing process exits. It is trivial to make this function return <code>NULL</code> <em>even for programs with entitlements</em>.</p>
<p>Back in 2012, <a href="https://github.com/axelexic">axelexic</a> used <code>dyld</code> interposing – a technique to replace functions at runtime – to bypass sandbox initialisation. The technique is possible because <code>dyld</code> a) runs in the application’s context and b) processes interposing <em>before</em> initialising loaded libraries. Hence, when <code>libsystem_secinit.dylib</code> is finally invoked, functions it depends on might have already been changed out from under it. The PoC published <a href="https://github.com/axelexic/SanboxInterposed">here</a> does exactly that. It uses <code>DYLD_INSERT_LIBRARIES</code> to inject a dynamic library that neuters <code>__mac_syscall</code>. In the years since, Apple changed <code>dyld</code> to ignore environment variables for apps with <em>useful</em> entitlements such as the microphone entitlement. In addition, <code>dyld</code> environment variables are ignored for apps launched from the system’s <code>/Applications</code> folder (which is <code>/System/Applications/</code> in macOS Catalina).</p>
<p>These restrictions don’t apply if you simply <em>link</em> with the interposing library, which also enables bypassing the App Sandbox. Wondering whether this is expected behaviour, I sent <a href="https://github.com/0xbf00/pocs/tree/master/CVE-2020-3854">a PoC</a> to Apple in September 2018. One and a half years later, this January, a fix for <a href="https://support.apple.com/HT210919">CVE-2020-3854</a> was released. So, what’s changed? As far as I can tell, nothing. <a href="https://github.com/0xbf00/pocs/tree/master/CVE-2020-3854">The PoC</a> still works. I am not terribly surprised about this. Interposing is a very old <em>feature</em>. Changing it might break existing applications and therefore carries a risk. In addition, Apple said they added checks to make sure MAS apps are not affected. My only gripe is why the issue is included in release notes of macOS 10.15.3 if nothing changed.</p>
<h2 id="trouble-in-decoding-land-what-are-entitlements">Trouble in Decoding Land: What <em>Are</em> Entitlements?</h2>
<p>Third scenario: we are dealing with a dynamically-linked, code-signed program with entitlements. The program doesn’t actively mess with sandbox initialisation in ways we discussed in the previous section. What else can go wrong?</p>
<p>Let’s look at the snippet from above again:</p>
<pre><code>xpc_object_t entitlements = xpc_copy_entitlements_for_pid(getpid());

if (entitlements) {
    const void* data = xpc_data_get_bytes_ptr(entitlements);
    size_t len = xpc_data_get_length(entitlements);

    ctx-&gt;entitlements = xpc_create_from_plist(data, len);
    xpc_release(entitlements);
}</code></pre>
<p>Now, <code>xpc_copy_entitlements_for_pid</code> will succeed and return a non-<code>NULL</code> XPC data blob. Next, <code>xpc_create_from_plist</code> parses the data and creates a dictionary for further processing. Can <em>this</em> function fail when given <em>valid</em> entitlements data? It surely can.</p>
<p>First though, what <em>are valid entitlements</em>? Is it legal to embed any valid plist as entitlements in a program? Only a subset of all valid plists? You’ll notice that the kernel calls out to <code>mac_vnode_check_signature</code> and kills your program if you use completely random keys in entitlements. As long as your keys use the <code>com.apple.security.</code> prefix though, you are good. What about the entitlements’ encoding? Plist files can use a variety of encodings: binary, JSON, UTF-8, UTF-16, UTF-32, …. Is it legal to use any of these encodings for entitlements?</p>
<p>To the best of my knowledge, there are no definitive answers to these basic questions. In practise, every tool handles the situation differently. It’s a mess: Xcode enforces UTF-8 encoding, <code>codesign</code> works with almost anything you throw at it, <code>asctl</code> seems to handle all valid plists, <a href="https://twitter.com/patrickwardle">@patrickwardle</a>’s <code>WhatsYourSign.app</code> <a href="https://github.com/objective-see/WhatsYourSign/blob/e0e3a05902192687c74382b2eebc24647fedfbf6/WhatsYourSignExt/FinderSync/Signing.m#L747">assumes UTF-8 encoding</a>. Crucially, the function in question above — <code>xpc_create_from_plist</code> — uses <em>its very own, separate</em> plist parser.</p>
<p>In 2018, I noticed that sandbox initialisation failed for programs with UTF-8 encoded entitlements that included <a href="https://stackoverflow.com/questions/4614378/getting-%C3%AF-at-the-beginning-of-my-xml-file-after-save?rq=1">an optional BOM</a> (<a href="https://github.com/0xbf00/pocs/tree/master/CVE-2018-4229">PoC here</a>). At the time, <code>xpc_create_from_plist</code> would fail and return <code>NULL</code>, thereby short-circuiting sandbox initialisation. There are actually apps on the MAS (<a href="https://itunes.apple.com/us/app/bridge-constructor-free/id579589796?mt=12">1</a>, <a href="https://itunes.apple.com/us/app/rock-run/id620099316?mt=12%5D">2</a>, <a href="https://itunes.apple.com/us/app/goldman-hd/id606805906?mt=12">3</a>) that triggered the issue. Because they passed App Review, I think it is fair to assume that nobody at the time verified applications were <em>actually running sandboxed</em>. Apple assigned CVE-2018-4229 and fixed this particular problem for <a href="https://support.apple.com/en-us/HT208849">macOS 10.13.5 and up</a>. The general problem persists: entitlements that cannot be decoded are silently ignored. Try it out for yourself: Use UTF-[16 | 32] encoded entitlements and sandboxing will be disabled. Throw a simple fuzzer at this function and you’ll likely drown in issues.</p>
<h2 id="takeaway">Takeaway</h2>
<p>The lesson of this article: Don’t <strong>ever</strong> trust the entitlements of programs you run. Malicious developers can craft apps that look and smell like they are sandboxed (and therefore might seem <em>“safe”</em> to run) but aren’t. It’s also possible for offending apps to use whatever sandbox profile they want. How about <code>(allow default)</code>? You’d never know; there are no tools for users (or the App Review team) to check for misbehaving apps. The best you can do is use <code>asctl</code> or <code>Activity Monitor.app</code>, neither of which will tell you <em>what</em> an app’s sandbox profile is or what it does.</p>
<h2 id="outlook">Outlook</h2>
<p>I don’t have special insights into the development process at Apple and the challenges they are facing. I’m sure there are reasons for why things are the way they are. Still, here’s what I think needs to change for the App Sandbox to be truly useful:</p>
<ol type="1">
<li>Do not allow user code to execute prior to initialising the sandbox. I think this could be achieved in one of two ways: ban <code>dyld</code> interposing outright for code with entitlements or map <em>all</em> user code as not executable initially. Only <em>after</em> running <code>libSystem</code>’s initialiser set the code pages to be executable.</li>
<li>Do not fail gracefully: if a program contains entitlements that cannot be decoded, kill the program. Better safe than sorry.</li>
<li>Do not allow statically-linked binaries or finally move application sandboxing to the kernel (don’t blame me for kernel bugs that may occur as a result of doing so!). Note that <code>Sandbox.kext</code> already enforces the platform sandbox profile on all apps.</li>
</ol>
<h2 id="changelog">Changelog</h2>
<p>March 20, 2020:</p>
<ul>
<li>Corrected statements regarding <code>dyld</code> environment variables (h/t <a href="https://twitter.com/lapcatsoftware">@lapcatsoftware</a>)</li>
<li>Added note about platform sandbox profile to Outlook (thanks <a href="https://twitter.com/sdotknight">@sdotknight</a>)</li>
<li>Clarified how I think App Sandboxing should ideally work (cc <a href="https://twitter.com/s1guza">@s1guza</a>)</li>
<li>Added explicit mention of CVE-2018-4229 to text (thanks Max!)</li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>"Linking a Microphone" Or: The Story of CVE-2018-4184</title>
    <link href="https://ubrigens.com/posts/linking_a_microphone.html" />
    <id>https://ubrigens.com/posts/linking_a_microphone.html</id>
    <published>2020-02-26T00:00:00Z</published>
    <updated>2020-02-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        "Linking a Microphone" Or: The Story of CVE-2018-4184
        <span class="date">February 26, 2020</span>
    </h2>
    <p>Developing and testing <a href="https://github.com/0xbf00/simbple"><code>simbple</code></a>, my SBPL interpreter, at the beginning of 2018, I thought my tool couldn’t possibly work correctly: scrolling through the results it yielded for <code>Calculator.app</code> — needless to say my main test application — I noticed this line in the generated profile:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scheme"><code class="sourceCode scheme"><span id="cb1-1"><a href="https://ubrigens.com#cb1-1" aria-hidden="true" tabindex="-1"></a>(allow device-microphone)</span></code></pre></div>
<p>Trying to figure out what went wrong, I created a minimal test case: taking <code>Calculator.app</code>’s Container file, I reduced it down to its core, stripping most entitlements, as many variables as possible and all sandbox snippets except for the <code>application.sb</code> base profile. To my surprise, the line displayed above disappeared. Eventually, I realised that the sandbox snippet associated with <code>SpeechRecognitionCore.framework</code> was to blame. This is what the snippet looked like:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scheme"><code class="sourceCode scheme"><span id="cb2-1"><a href="https://ubrigens.com#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">;;</span></span>
<span id="cb2-2"><a href="https://ubrigens.com#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; Speech Recognition Core framework - sandbox profile</span></span>
<span id="cb2-3"><a href="https://ubrigens.com#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co">;; Copyright (c) 2013 Apple Inc. All Rights reserved.</span></span>
<span id="cb2-4"><a href="https://ubrigens.com#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">;;</span></span>
<span id="cb2-5"><a href="https://ubrigens.com#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">;; </span><span class="al">WARNING</span><span class="co">: The sandbox rules in this file currently constitute</span></span>
<span id="cb2-6"><a href="https://ubrigens.com#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; Apple System Private Interface and are subject to change at any time and</span></span>
<span id="cb2-7"><a href="https://ubrigens.com#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">;; without notice. The contents of this file are also auto-generated and not</span></span>
<span id="cb2-8"><a href="https://ubrigens.com#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">;; user editable; it may be overwritten at any time.</span></span>
<span id="cb2-9"><a href="https://ubrigens.com#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">;;</span></span>
<span id="cb2-10"><a href="https://ubrigens.com#cb2-10" aria-hidden="true" tabindex="-1"></a>(allow device-microphone)</span></code></pre></div>
<p>But what does <code>SpeechRecognitionCore</code> have to do with <code>Calculator.app</code>?</p>
<h2 id="a-second-look-at-sandbox-snippets">A Second Look at Sandbox Snippets</h2>
<p><a href="https://ubrigens.com/posts/sandbox_tour.html">In my introductory post</a> about the App Sandbox, I listed the inputs <code>libsandbox</code> receives to build the sandbox profile for a specific app. Among them were <em>sandbox snippets</em>, a list of SBPL profiles that are evaluated to build the final list of sandbox rules. In addition to <code>application.sb</code>, which forms the foundation of the App Sandbox, your app can depend on external (system) frameworks and libraries. These frameworks may require additional, custom sandbox rules to function properly, which are specified in the <code>Resources/framework.sb</code> file as part of the framework bundle. Note that while such additional sandbox rules theoretically are required by that framework only, the sandbox works on a per-process basis. Because application and framework code runs in the same process, they also affect the application.</p>
<p>On my system, <code>Calculator.app</code> links with 11 frameworks / libraries</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="https://ubrigens.com#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> otool <span class="at">-L</span> /Applications/Calculator.app/Contents/MacOS/Calculator </span>
<span id="cb3-2"><a href="https://ubrigens.com#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">/Applications/Calculator.app/Contents/MacOS/Calculator:</span></span>
<span id="cb3-3"><a href="https://ubrigens.com#cb3-3" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit</span> <span class="er">(</span><span class="ex">compatibility</span> version 45.0.0, current version 1671.40.104<span class="kw">)</span></span>
<span id="cb3-4"><a href="https://ubrigens.com#cb3-4" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa</span> <span class="er">(</span><span class="ex">compatibility</span> version 1.0.0, current version 23.0.0<span class="kw">)</span></span>
<span id="cb3-5"><a href="https://ubrigens.com#cb3-5" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/System/Library/PrivateFrameworks/SpeechDictionary.framework/Versions/A/SpeechDictionary</span> <span class="er">(</span><span class="ex">compatibility</span> version 1.0.0, current version 1.0.0<span class="kw">)</span></span>
<span id="cb3-6"><a href="https://ubrigens.com#cb3-6" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/System/Library/PrivateFrameworks/SpeechObjects.framework/Versions/A/SpeechObjects</span> <span class="er">(</span><span class="ex">compatibility</span> version 1.0.0, current version 1.0.0<span class="kw">)</span></span>
<span id="cb3-7"><a href="https://ubrigens.com#cb3-7" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/System/Library/PrivateFrameworks/Calculate.framework/Versions/A/Calculate</span> <span class="er">(</span><span class="ex">compatibility</span> version 1.0.0, current version 1.0.0<span class="kw">)</span></span>
<span id="cb3-8"><a href="https://ubrigens.com#cb3-8" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices</span> <span class="er">(</span><span class="ex">compatibility</span> version 1.0.0, current version 50.1.0<span class="kw">)</span></span>
<span id="cb3-9"><a href="https://ubrigens.com#cb3-9" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore</span> <span class="er">(</span><span class="ex">compatibility</span> version 1.2.0, current version 1.11.0<span class="kw">)</span></span>
<span id="cb3-10"><a href="https://ubrigens.com#cb3-10" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation</span> <span class="er">(</span><span class="ex">compatibility</span> version 300.0.0, current version 1570.13.0<span class="kw">)</span></span>
<span id="cb3-11"><a href="https://ubrigens.com#cb3-11" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/usr/lib/libobjc.A.dylib</span> <span class="er">(</span><span class="ex">compatibility</span> version 1.0.0, current version 228.0.0<span class="kw">)</span></span>
<span id="cb3-12"><a href="https://ubrigens.com#cb3-12" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/usr/lib/libSystem.B.dylib</span> <span class="er">(</span><span class="ex">compatibility</span> version 1.0.0, current version 1252.250.1<span class="kw">)</span></span>
<span id="cb3-13"><a href="https://ubrigens.com#cb3-13" aria-hidden="true" tabindex="-1"></a>	<span class="ex">/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation</span> <span class="er">(</span><span class="ex">compatibility</span> version 150.0.0, current version 1570.13.0<span class="kw">)</span></span></code></pre></div>
<p>At runtime, when linking, <code>dyld</code> will resolve and load dependencies <em>recursively</em>. Dependencies of dependencies will also be loaded into the address space of the app. When sandboxing the app, <a href="https://github.com/0xbf00/libsecinit/blob/24962765158a9e0330f2e8732a4738b5c888d2c9/src/libsecinit.c#L207"><em>all</em> loaded libraries</a> are considered when looking for sandbox snippets (though snippets from non-system libraries are by default silently ignored).</p>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox/snippets.svg" alt="Overview: Sandbox Snippets on macOS" />
<figcaption aria-hidden="true">Overview: Sandbox Snippets on macOS</figcaption>
</figure>
<p>This is how that snippet ended up in my output! The private <code>SpeechRecognitionCore.framework</code> is a second-order dependency of <code>AppKit</code>, the ubiquitous UI-framework on macOS.</p>
<p>This bug was trivial to exploit: Link with <code>AppKit</code> — arguably the most important framework on macOS — and listen in on your users. No entitlement required. <a href="https://github.com/0xbf00/pocs/tree/master/CVE-2018-4184">Here’s</a> my PoC.</p>
<h2 id="impact">Impact</h2>
<p>As part of my Master’s Thesis, I was investigating how sandboxing was used in the Mac App Store (MAS) at the beginning of 2018. To answer this question, I collected all free apps from the German MAS, resulting in a dataset comprised of 7 603 real-world apps. By my own measurements, I had collected 25% of <em>all</em> apps available on the store at that time. This dataset came in handy when figuring out how many apps were (inadvertently) affected by CVE-2018-4184:</p>
<ul>
<li>356 apps had an entitlement granting them legitimate microphone access</li>
<li>At least 6523 <em>additional</em> apps (roughly 90% of all analysed apps) could access the microphone due to this bug</li>
<li>There were 1014 apps that a) imported a function related to audio recording though b) did not possess entitlements granting them legitimate microphone access but c) could still access the microphone due to the vulnerability identified. Most likely, these apps simply linked with a framework that happened to offer audio functionality, even though it was never used. But maybe not?</li>
</ul>
<p>In summary, at the start of 2018, the vast majority of applications – at least 94.2% of apps analysed – could access the microphone, even though only 4.87% of all applications had the required entitlement. This is not all that surprising, considering the importance of <code>AppKit</code>. Check out <a href="https://svs.informatik.uni-hamburg.de/publications/2019/2019-11-Blochberger-State-of-the-Sandbox.pdf">this paper</a> for more information about the dataset used here and some cool statistics about the App Sandbox’s adoption.</p>
<h2 id="disclosure-timeline">Disclosure Timeline</h2>
<p>This issue was resolved in 81 days.</p>
<p>March 12, 2018 — Initial report sent to Apple </br>
March 21, 2018 — Apple confirms vulnerability, plans to address it in an upcoming security update </br>
June 1, 2018 — <a href="https://support.apple.com/en-us/HT208849">Patch released</a>. The patch modified <code>SpeechRecognitionCore</code>’s sandbox snippet to check for the microphone entitlement. In recent versions of macOS, the sandbox snippet is completely empty.</p>
<p>Fun fact: The patch was only provided for macOS 10.13 and above. A fully patched 10.12 (which received security updates well into 2019) is still vulnerable.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>It's Simbple: Peeking Inside App Sandbox Profiles</title>
    <link href="https://ubrigens.com/posts/simbple.html" />
    <id>https://ubrigens.com/posts/simbple.html</id>
    <published>2020-02-21T00:00:00Z</published>
    <updated>2020-02-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        It's Simbple: Peeking Inside App Sandbox Profiles
        <span class="date">February 21, 2020</span>
    </h2>
    <p>I concluded <a href="https://ubrigens.com/posts/sandbox_tour.html">my previous post</a> by motivating that we should be able to audit the sandbox configurations of apps we run. Because of the way the App Sandbox works on macOS, this means we need access to a human-readable version of the sandbox profile <em>generated</em> by <code>libsandbox.dylib</code>. Unfortunately, this is not something that Apple’s software currently allows for.</p>
<p>There have been numerous projects that <em>decompile</em> sandbox bytecode back to a human-readable representation, most notably Blazakis’s <a href="https://github.com/dionthegod/XNUSandbox">XNUSandbox project</a>, Esser’s <a href="https://github.com/sektioneins/sandbox_toolkit/tree/master/sb2dot">sb2dot</a>, work by <a href="https://argp.github.io/research/">argp</a> and <a href="https://github.com/malus-security/sandblaster">SandBlaster</a>. These tools are necessary on iOS; Profiles there are only available in binary form. Most of these tools however suffer from two problems. Firstly, they are hard to keep up to date, as even small changes to the bytecode format break the tooling. Secondly, most of the tools do not produce syntactically valid SBPL and therefore cannot be recompiled. As a result, it is not possible to verify their output.</p>
<p>On macOS, things are generally simpler: Rather than reverse engineering the sandbox bytecode format, I reverse engineered how <code>libsandbox</code> internally handles entitlements, sandbox snippets and parameters to evaluate and compile sandbox profiles.</p>
<p>The result of this research is <a href="https://github.com/0xbf00/simbple"><code>simbple</code></a>, a tool that reimplements the profile evaluation process done in <code>libsandbox</code> but outputs verifiably correct, human-readable SBPL.</p>
<p>Note that <a href="https://twitter.com/sdotknight/status/1230222846120644608">@sdotknight rightfully points</a> out that there is a platform profile that <em>also</em> affects sandboxing on macOS. My approach here only considers the sandbox profile generated in userland and does not consider the platform profile, which is embedded inside of <code>Sandbox.kext</code>.</p>
<h2 id="the-anatomy-of-container.plist-files-on-macos">The Anatomy of Container.plist files on macOS</h2>
<p><code>simbple</code> takes as input an apps’ <code>Container.plist</code> file, which can be found under <code>~/Library/Containers/bundle_id/</code>. This binary-encoded plist file contains lots of useful information (<em>note</em>: launch the target app once to generate the file). Follow along using:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="https://ubrigens.com#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Built-in tools, always available</span></span>
<span id="cb1-2"><a href="https://ubrigens.com#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> plutil <span class="at">-convert</span> xml1 /path/to/Container.plist <span class="at">-o</span> <span class="at">-</span></span>
<span id="cb1-3"><a href="https://ubrigens.com#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co"># Levin's excellent tools. Display the information in a simpler format.</span></span>
<span id="cb1-4"><a href="https://ubrigens.com#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> jlutil /path/to/Container.plist</span></code></pre></div>
<p>Likely taking up the most space in any <code>Container.plist</code>, the <code>SandboxProfileData</code> key holds the base64-encoded binary sandbox profile compiled by <code>libsandbox</code>.</p>
<p>Grouped under <code>SandboxProfileDataValidationInfo</code> are inputs <code>libsandbox</code> uses to compile sandbox profiles:</p>
<ol type="1">
<li><code>SandboxProfileDataValidationParametersKey</code> — Contains several “global variables” such as the user’s home directory (stored as <code>_HOME</code>), her username (<code>_USER</code>) and various (auto-generated) paths to the application bundle and temporary directories.</li>
<li><code>SandboxProfileDataValidationRedirectablePathsKey</code> — approved paths that may be accessed through symlinks</li>
<li><code>SandboxProfileDataValidationEntitlementsKey</code> — An app’s entitlements.</li>
<li><code>SandboxProfileDataValidationSnippetDictionariesKey</code> — A list of sandbox <em>snippets</em> (see previous post) included in the final profile. Each snippet is described by two keys, though only one of them — <code>AppSandboxProfileSnippetPathKey</code> — is important here. It specifies the file system path to the snippet.</li>
</ol>
<h2 id="using-simbple">Using <code>simbple</code></h2>
<p><code>simbple</code> uses existing <code>Container.plist</code> files to reuse the same parameters that were initially used by the system. This simplifies the design of the tool.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="https://ubrigens.com#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> simbple <span class="at">--help</span></span>
<span id="cb2-2"><a href="https://ubrigens.com#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Usage:</span> simbple <span class="pp">[</span><span class="ss">OPTION...</span><span class="pp">]</span> CONTAINER_METADATA</span>
<span id="cb2-3"><a href="https://ubrigens.com#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Evaluate</span> a SBPL <span class="er">(</span><span class="ex">+</span> Scheme<span class="kw">)</span> <span class="ex">profile</span></span>
<span id="cb2-4"><a href="https://ubrigens.com#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="https://ubrigens.com#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">-o,</span> <span class="at">--output</span><span class="op">=</span>FILE          Output file</span>
<span id="cb2-6"><a href="https://ubrigens.com#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">-p,</span> <span class="at">--profile</span><span class="op">=</span>PROFILE      Base profile to evaluate. Defaults to</span>
<span id="cb2-7"><a href="https://ubrigens.com#cb2-7" aria-hidden="true" tabindex="-1"></a>                             <span class="ex">application.sb</span> profile.</span>
<span id="cb2-8"><a href="https://ubrigens.com#cb2-8" aria-hidden="true" tabindex="-1"></a>      <span class="ex">--platforms=PLATFORM</span>   sierra, high_sierra, mojave <span class="er">(</span><span class="ex">default</span><span class="kw">)</span><span class="ex">,</span> catalina</span>
<span id="cb2-9"><a href="https://ubrigens.com#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="https://ubrigens.com#cb2-10" aria-hidden="true" tabindex="-1"></a> <span class="ex">Output</span> formats:</span>
<span id="cb2-11"><a href="https://ubrigens.com#cb2-11" aria-hidden="true" tabindex="-1"></a>      <span class="ex">--json</span>                 Output as JSON</span>
<span id="cb2-12"><a href="https://ubrigens.com#cb2-12" aria-hidden="true" tabindex="-1"></a>      <span class="ex">--scheme</span>               Output as SCHEME / SBPL</span>
<span id="cb2-13"><a href="https://ubrigens.com#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="https://ubrigens.com#cb2-14" aria-hidden="true" tabindex="-1"></a> <span class="ex">Misc</span> options:</span>
<span id="cb2-15"><a href="https://ubrigens.com#cb2-15" aria-hidden="true" tabindex="-1"></a>      <span class="ex">--patch</span>                Patch the output profile to log all statements.</span>
<span id="cb2-16"><a href="https://ubrigens.com#cb2-16" aria-hidden="true" tabindex="-1"></a>      <span class="ex">--verify</span>               Verify semantic correctness of generated results</span>
<span id="cb2-17"><a href="https://ubrigens.com#cb2-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-18"><a href="https://ubrigens.com#cb2-18" aria-hidden="true" tabindex="-1"></a>  <span class="ex">-?,</span> <span class="at">--help</span>                 Give this help list</span>
<span id="cb2-19"><a href="https://ubrigens.com#cb2-19" aria-hidden="true" tabindex="-1"></a>      <span class="ex">--usage</span>                Give a short usage message</span>
<span id="cb2-20"><a href="https://ubrigens.com#cb2-20" aria-hidden="true" tabindex="-1"></a>  <span class="ex">-V,</span> <span class="at">--version</span>              Print program version</span>
<span id="cb2-21"><a href="https://ubrigens.com#cb2-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-22"><a href="https://ubrigens.com#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="ex">Mandatory</span> or optional arguments to long options are also mandatory or optional</span>
<span id="cb2-23"><a href="https://ubrigens.com#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> any <span class="ex">corresponding</span> short options.</span>
<span id="cb2-24"><a href="https://ubrigens.com#cb2-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-25"><a href="https://ubrigens.com#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="ex">The</span> output is a simplified SBPL profile that can be analysed, modified and</span>
<span id="cb2-26"><a href="https://ubrigens.com#cb2-26" aria-hidden="true" tabindex="-1"></a><span class="ex">compiled</span> as is.</span></code></pre></div>
<p>In its simplest form, simply invoke <code>simbple</code> with a path to the <code>Container.plist</code> file of the app you are interested in. Doing so will spit out the SBPL profile of the target app:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="https://ubrigens.com#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> simbple ~/Library/Containers/com.apple.calculator/Container.plist</span>
<span id="cb3-2"><a href="https://ubrigens.com#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">(</span><span class="ex">version</span> 1<span class="kw">)</span></span>
<span id="cb3-3"><a href="https://ubrigens.com#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">(</span><span class="ex">deny</span></span>
<span id="cb3-4"><a href="https://ubrigens.com#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="ex">default</span></span>
<span id="cb3-5"><a href="https://ubrigens.com#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">)</span></span>
<span id="cb3-6"><a href="https://ubrigens.com#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="kw">(</span><span class="ex">allow</span></span>
<span id="cb3-7"><a href="https://ubrigens.com#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="ex">mach-register</span></span>
<span id="cb3-8"><a href="https://ubrigens.com#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">(</span><span class="ex">local-name-prefix</span> <span class="st">&quot;&quot;</span><span class="kw">)</span></span>
<span id="cb3-9"><a href="https://ubrigens.com#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="kw">)</span></span>
<span id="cb3-10"><a href="https://ubrigens.com#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="kw">(</span><span class="ex">allow</span></span>
<span id="cb3-11"><a href="https://ubrigens.com#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="ex">mach-lookup</span></span>
<span id="cb3-12"><a href="https://ubrigens.com#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">(</span><span class="ex">xpc-service-name-prefix</span> <span class="st">&quot;&quot;</span><span class="kw">)</span></span>
<span id="cb3-13"><a href="https://ubrigens.com#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="kw">)</span></span>
<span id="cb3-14"><a href="https://ubrigens.com#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="co"># &gt; 1800 lines follow on my system</span></span></code></pre></div>
<p>The resulting sandbox profiles can be manually audited and modified, automatically patched or simply be compiled to profile bytecode using <a href="https://github.com/sektioneins/sandbox_toolkit/tree/master/compile_sb">Stefan Esser’s tool</a>. The results are useful not only to security researchers interested in studying the sandbox, but also for example to developers debugging their sandboxed applications.</p>
<p>To verify that results are <em>correct</em> — meaning compiling the output results in identical sandbox bytecode to <code>libsandbox</code>’s result — use the <code>--verify</code> option. This is yet another benefit of using existing <code>Container.plist</code> files. We can use the <code>SandboxProfileData</code> data as ground truth to check against. Sandbox compilation is still a (<a href="https://github.com/0xbf00/simbple/blob/e4211c3428a417e351b7487990d00db2a71b3b69/src/sb/verify.c#L46">mostly</a>) deterministic process.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="https://ubrigens.com#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> simbple ~/Library/Containers/com.apple.calculator/Container.plist <span class="at">-o</span> /dev/null <span class="at">--verify</span></span>
<span id="cb4-2"><a href="https://ubrigens.com#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> echo <span class="va">$?</span></span>
<span id="cb4-3"><a href="https://ubrigens.com#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span> <span class="co"># Verification succeeded.</span></span></code></pre></div>
<h2 id="a-teaser-the-story-of-cve-2018-4184">A Teaser: The Story of CVE-2018-4184</h2>
<p><a href="https://support.apple.com/en-us/HT208849">macOS 10.13.5 fixed CVE-2018-4184</a>, an issue with “the handling of microphone access” I reported in 2018:</p>
<pre><code>*Speech*
	Available for: macOS High Sierra 10.13.4
	Impact: A sandboxed process may be able to circumvent sandbox restrictions
	Description: A sandbox issue existed in the handling of microphone access. This issue was addressed with improved handling of microphone access.
	CVE-2018-4184: Jakob Rieck (@0xdead10cc) of the Security in Distributed Systems Group, University of Hamburg</code></pre>
<p>What was the problem? Virtually every app — no matter their entitlements — was able to use the microphone on macOS. How did I figure this out? Well, I was developing <code>simbple</code> and thought my tool couldn’t possibly work correctly: scrolling through <code>Calculator.app</code>’s results, I noticed this line in the generated profile:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scheme"><code class="sourceCode scheme"><span id="cb6-1"><a href="https://ubrigens.com#cb6-1" aria-hidden="true" tabindex="-1"></a>(allow device-microphone)</span></code></pre></div>
<p>Refer back to my previous post to see <code>Calculator.app</code>’s entitlements, which notably do not (and did not) allow the app access to the microphone. What was going on?!</p>
</div>
]]></summary>
</entry>
<entry>
    <title>A Whirlwind Tour of the Apple Sandbox</title>
    <link href="https://ubrigens.com/posts/sandbox_tour.html" />
    <id>https://ubrigens.com/posts/sandbox_tour.html</id>
    <published>2020-02-17T00:00:00Z</published>
    <updated>2020-02-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        A Whirlwind Tour of the Apple Sandbox
        <span class="date">February 17, 2020</span>
    </h2>
    <p>No-one knows how to design truly secure software. Any sufficiently complex software <em>will</em> contain vulnerabilities that can be abused by motivated attackers to subvert a program’s execution. Accepting this reality, the focus of the last few decades has been on developing exploit mitigation techniques such as <em>Address Space Layout Randomisation</em> (ASLR) and <em>Data Execution Prevention</em> (DEP) which focus on <em>increasing difficulty and costs</em> for attackers.</p>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_tour/dac_mac.svg" alt="Overview: DAC vs MAC" />
<figcaption aria-hidden="true">Overview: DAC vs MAC</figcaption>
</figure>
<p>Sandboxing is one such mitigation. It aims to reduce the damage of successful attacks on the host system. On traditional UNIX systems, programs run <em>as</em> a user (in what’s referred to as <em>discretionary access control</em> — DAC), inheriting all her capabilities and permissions. Most of these capabilities and permissions however are never actually required by the executing program. Sandboxing (a form of <em>mandatory access control</em> or MAC) uses per-application security policies to limit the actions a program may take and the resources it is allowed to access; it aims to make <em>what a program can do</em> the same as <em>what a program was made to do</em>. In this way, sandboxing implements the foundational information security principle of <strong>least privilege</strong>, which states that programs and users should operate using the least amount of privilege necessary to complete a certain job. Sandboxed applications – even when compromised – can access only predefined parts of the system, limiting their damage potential and requiring attackers to escape the sandbox to compromise the system itself.</p>
<p>Security benefits afforded by sandboxing hinge on proper configuration and understanding of the sandbox mechanism itself. No mitigation is perfect; <a href="https://twitter.com/halvarflake/status/1156815950873804800">Mitigations have complexity, inspectability and debuggability costs</a>. The App Sandbox is no exception: it has had a massive impact on developers scrambling to sandbox their software which was largely designed without sandboxing in mind. Apple’s sandbox implementation lacks public documentation. It “just works”, until it doesn’t. In 2018, I wrote my Master’s Thesis on the topic. In this series of posts, I am sharing what I learned in the process. My focus today is on implementation, configuration and design internals that might not be known to a wider audience.</p>
<h3 id="threat-model">Threat Model</h3>
<p>A threat model states what you (a user / a mitigation / a security system) are protecting against (and also what’s not covered). It is crucial to motivate the need for any mitigation; Unfortunately, Apple does not provide an explicit threat model for the App Sandbox. I pieced together my own version here from available marketing materials, developer-facing documentation and public sandbox-related patents.</p>
<p>The App Sandbox “<a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/AppSandboxDesignGuide/AboutAppSandbox/AboutAppSandbox.html">is designed to contain damage to the system and the user’s data if an app becomes compromised</a>”. However, it is “<a href="https://developer.apple.com/videos/play/wwdc2011/204/">not an anti-virus system; does not target intentionally malicious software</a>”. There is no practical difference between “intentionally malicious software” and software “compromised by malicious software”. This last quote can therefore only mean that <em>sandboxing in itself cannot stop malicious applications from abusing their officially granted permissions</em>, i.e. a malicious app can steal all user data it legitimately has access to. Sandboxing however should restrict even malicious applications from accessing resources that the app is not entitled to access. This interpretation of the former quote is consistent with Apple’s own patents on the topic, which motivate the need for sandboxing by stating that a “<a href="https://patents.google.com/patent/US9280644B2/en">program may be a malicious program that is developed to intentionally cause damages</a>” and “<a href="https://patents.google.com/patent/US9280644B2/en">by restricting the execution of a program within a restricted operating environment, such damages can be greatly reduced</a>”. Related patents echo this interpretation [<a href="https://patents.google.com/patent/US8943550">1</a>, <a href="https://www.researchgate.net/publication/302691438_System_and_method_for_preserving_references_in_sandboxes">2</a>].</p>
<p>All programs are initially launched <em>non-sandboxed</em> because they “<a href="https://patents.google.com/patent/US8635663">may not have had an opportunity to compile and prepare a profile to express permitted actions</a>”. This is argued to be “<a href="https://patents.google.com/patent/US8635663">consistent with the […] design of [the Sandbox] that permits intentional user actions</a>”. Here, a user launching an application is interpreted as user intent. This little-known fact, which is completely absent from all official documentation, is the achilles heel of the whole system. Under <em>normal</em> circumstances, the sandbox is initialised before transfer is controlled to application code. However, because initialisation happens in the context of the application itself, there is precious little room for error. As it stands, there is no process to ensure applications, whose metadata suggest they should run sandboxed, actually run sandboxed. I feel that this runs counter to the idea of <em>mandatory</em> sandboxing on macOS.</p>
<h2 id="configuration">Configuration</h2>
<p>Apple’s sandbox restricts programs in what they can do on the user’s system. As every application is unique, the sandbox theoretically has to be configured individually for each app. This cumbersome process falls to developers to do. For software distributed in the Mac App Store (MAS), sandboxing is mandatory and enforced by Apple. <a href="https://svs.informatik.uni-hamburg.de/publications/2019/2019-11-Blochberger-State-of-the-Sandbox.pdf">Outside the MAS, sandboxing is still the exception, not the rule</a>.</p>
<p>To configure per-program sandbox policies, two options are available: <em>SBPL</em>, a low-level configuration language, and <em>entitlements</em>, which offer a high-level interface and are the only officially supported sandbox configuration option.</p>
<h3 id="sbpl">SBPL</h3>
<p>The Sandbox Profile Language (SBPL) is implemented on top of the Scheme programming language. In what is referred to as an embedded domain specific language (EDSL), the base language (Scheme) is extended and augmented by custom identifiers, functions and macros to encode sandbox rules.</p>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_tour/sbpl_components.svg" alt="SBPL Language Components" />
<figcaption aria-hidden="true">SBPL Language Components</figcaption>
</figure>
<p>Sandbox profiles written in SBPL consist of multiple rules specified one after the other. Later rules can overwrite preceding rules, which is commonly used to implement whitelisting profiles: Deny everything first, then selectively re-enable only what is needed. Confirmed by extensive testing, the <em>last applicable rule</em> in a profile guides the final sandbox decision for a certain resource. Each rule consists of up to four components: An <em>action</em>, one or more <em>operations</em>, and optional <em>filters</em> and <em>modifiers</em>. Actions decide whether to allow or deny resource accesses. Operations denote the kind of resource access the rule applies to. Filters restrict a rule’s effect to a subset of all resources, for example only to files in a certain directory. Lastly, modifiers change the default behaviour of the sandbox. By default, only denied resource accesses are logged; a modifier changes this. A few years back, <a href="https://twitter.com/osxreverser">@osxreverser</a> bothered to <a href="https://reverse.put.as/wp-content/uploads/2011/09/Apple-Sandbox-Guide-v0.1.pdf">document the language</a>. It’s somewhat outdated, but still very useful.</p>
<p>While the core SBPL language as described above is conceptually simple, SBPL profiles can include arbitrary Scheme code to dynamically <em>generate sandbox rules during evaluation</em>. Consider the following two SBPL snippets; Their compiled sandbox bytecode is identical.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scheme"><code class="sourceCode scheme"><span id="cb1-1"><a href="https://ubrigens.com#cb1-1" aria-hidden="true" tabindex="-1"></a>(version <span class="dv">1</span>)</span>
<span id="cb1-2"><a href="https://ubrigens.com#cb1-2" aria-hidden="true" tabindex="-1"></a>(allow file-read-data</span>
<span id="cb1-3"><a href="https://ubrigens.com#cb1-3" aria-hidden="true" tabindex="-1"></a>	(subpath <span class="st">&quot;/usr/bin&quot;</span>)</span>
<span id="cb1-4"><a href="https://ubrigens.com#cb1-4" aria-hidden="true" tabindex="-1"></a>	(subpath <span class="st">&quot;/usr/local&quot;</span>)</span>
<span id="cb1-5"><a href="https://ubrigens.com#cb1-5" aria-hidden="true" tabindex="-1"></a>	(with report))</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode scheme"><code class="sourceCode scheme"><span id="cb2-1"><a href="https://ubrigens.com#cb2-1" aria-hidden="true" tabindex="-1"></a>(version <span class="dv">1</span>)</span>
<span id="cb2-2"><a href="https://ubrigens.com#cb2-2" aria-hidden="true" tabindex="-1"></a>(<span class="ex">define</span><span class="fu"> </span>(usr_plus suffix) (<span class="kw">string-append</span> <span class="st">&quot;/usr/&quot;</span> suffix))</span>
<span id="cb2-3"><a href="https://ubrigens.com#cb2-3" aria-hidden="true" tabindex="-1"></a>(<span class="ex">define</span><span class="fu"> </span>(file-read-rule action <span class="kw">filter</span>)</span>
<span id="cb2-4"><a href="https://ubrigens.com#cb2-4" aria-hidden="true" tabindex="-1"></a>	(action file-read-data</span>
<span id="cb2-5"><a href="https://ubrigens.com#cb2-5" aria-hidden="true" tabindex="-1"></a>			<span class="kw">filter</span></span>
<span id="cb2-6"><a href="https://ubrigens.com#cb2-6" aria-hidden="true" tabindex="-1"></a>			(with report)))</span>
<span id="cb2-7"><a href="https://ubrigens.com#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="https://ubrigens.com#cb2-8" aria-hidden="true" tabindex="-1"></a>(file-read-rule allow</span>
<span id="cb2-9"><a href="https://ubrigens.com#cb2-9" aria-hidden="true" tabindex="-1"></a>	(require-any </span>
<span id="cb2-10"><a href="https://ubrigens.com#cb2-10" aria-hidden="true" tabindex="-1"></a>		(subpath (usr_plus <span class="st">&quot;bin&quot;</span>))</span>
<span id="cb2-11"><a href="https://ubrigens.com#cb2-11" aria-hidden="true" tabindex="-1"></a>		(subpath (usr_plus <span class="st">&quot;local&quot;</span>))))</span></code></pre></div>
<p>Developers wishing to write SBPL sandbox profiles directly call <code>sandbox_init</code> from their application to voluntarily enable sandboxing. Well intentioned power users can use the <code>sandbox-exec</code> command line utility to run third-party software in custom sandboxes. Don’t bother doing this however; the software will not work correctly. On the off chance it does work correctly, your sandbox profile will be too permissive.</p>
<p>SBPL is complex and difficult to use, even for experienced developers. Though only rarely used <em>directly</em> nowadays, it still forms the foundation for sandboxing on macOS and therefore remains important to understand.</p>
<h3 id="entitlements">Entitlements</h3>
<p><em>Entitlements</em> were introduced for reasons of usability. A “<a href="https://patents.google.com/patent/US20130283344">developer does not need to know how to program or set up a set of rules for the purpose of generating a security profile</a>”. Instead, developers specify entitlements that represent the resources and capabilities their software needs to use (and hopefully no others).</p>
<p>Entitlements are not specific to sandboxing; They are also used for <em>iCloud</em>, <em>Push Notifications</em> and <em>Apple Pay</em>, to name just a few. At its core, each <em>entitlement</em> is a key-value pair, where the key is a string identifying the entitlement and the value configures the entitlement. Values can be of any type supported in property lists, including booleans, strings, dictionaries or arrays. <em>Entitlements</em> are then simply a collection of a program’s individual capabilities.
Developers add the entitlements their applications require using Xcode or manually by editing a property list file. This list is securely embedded in the target program as part of its code signature and cannot be tampered with without invaliding an app’s cryptographic code signature. Using the <code>codesign</code> utility shows you which entitlements are embedded in binaries on your system:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="https://ubrigens.com#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> codesign <span class="at">-d</span> —entitlements :- /Applications/Calculator.app</span>
<span id="cb3-2"><a href="https://ubrigens.com#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="va">Executable</span><span class="op">=</span>/Applications/Calculator.app/Contents/MacOS/Calculator</span>
<span id="cb3-3"><a href="https://ubrigens.com#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span><span class="ex">?xml</span> version=“1.0” encoding=“UTF-8”<span class="pp">?</span><span class="op">&gt;</span></span>
<span id="cb3-4"><a href="https://ubrigens.com#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>!DOCTYPE <span class="ex">plist</span> PUBLIC “-//Apple//DTD PLIST 1.0//EN” “http://www.apple.com/DTDs/PropertyList-1.0.dtd”<span class="op">&gt;</span></span>
<span id="cb3-5"><a href="https://ubrigens.com#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>plist <span class="va">version</span><span class="op">=</span>“1.0”<span class="op">&gt;</span></span>
<span id="cb3-6"><a href="https://ubrigens.com#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>dict<span class="op">&gt;</span></span>
<span id="cb3-7"><a href="https://ubrigens.com#cb3-7" aria-hidden="true" tabindex="-1"></a>	<span class="op">&lt;</span>key<span class="op">&gt;</span>com.apple.security.app-sandbox<span class="op">&lt;</span>/key<span class="op">&gt;</span></span>
<span id="cb3-8"><a href="https://ubrigens.com#cb3-8" aria-hidden="true" tabindex="-1"></a>	<span class="op">&lt;</span>true/<span class="op">&gt;</span></span>
<span id="cb3-9"><a href="https://ubrigens.com#cb3-9" aria-hidden="true" tabindex="-1"></a>	<span class="op">&lt;</span>key<span class="op">&gt;</span>com.apple.security.files.user-selected.read-write<span class="op">&lt;</span>/key<span class="op">&gt;</span></span>
<span id="cb3-10"><a href="https://ubrigens.com#cb3-10" aria-hidden="true" tabindex="-1"></a>	<span class="op">&lt;</span>true/<span class="op">&gt;</span></span>
<span id="cb3-11"><a href="https://ubrigens.com#cb3-11" aria-hidden="true" tabindex="-1"></a>	<span class="op">&lt;</span>key<span class="op">&gt;</span>com.apple.security.network.client<span class="op">&lt;</span>/key<span class="op">&gt;</span></span>
<span id="cb3-12"><a href="https://ubrigens.com#cb3-12" aria-hidden="true" tabindex="-1"></a>	<span class="op">&lt;</span>true/<span class="op">&gt;</span></span>
<span id="cb3-13"><a href="https://ubrigens.com#cb3-13" aria-hidden="true" tabindex="-1"></a>	<span class="op">&lt;</span>key<span class="op">&gt;</span>com.apple.security.print<span class="op">&lt;</span>/key<span class="op">&gt;</span></span>
<span id="cb3-14"><a href="https://ubrigens.com#cb3-14" aria-hidden="true" tabindex="-1"></a>	<span class="op">&lt;</span>true/<span class="op">&gt;</span></span>
<span id="cb3-15"><a href="https://ubrigens.com#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>/dict<span class="op">&gt;</span></span>
<span id="cb3-16"><a href="https://ubrigens.com#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>/plist<span class="op">&gt;</span></span></code></pre></div>
<p>Here we see <code>Calculator.app</code>’s entitlements. Applications enabling the App Sandbox using the <code>com.apple.security.app-sandbox</code> entitlement are automatically sandboxed before any application code has the chance to execute (or so in theory…). Apple mandates sandboxing for applications from the MAS and ensures new apps possess this crucial entitlement. <code>Calculator.app</code> further declares entitlements allowing it to make outbound network connections (<code>*.network.client</code>), print, as well as read <em>and</em> write user-selected files. However, <code>Calculator.app</code> will for example never be able to use the microphone.</p>
<p>The list of documented (and undocumented) entitlements grows with every new macOS release. Check out <a href="http://newosxbook.com/ent.jl">Levin’s entitlement database</a> and setup <a href="https://github.com/ChiChou/wiggle">wiggle</a> on your Mac to investigate further.</p>
<p>In contrast to SBPL, entitlements are easy to understand and use. They hide the underlying complexity of the sandbox from developers, at the expense of policy flexibility.</p>
<h2 id="architecture">Architecture</h2>
<p>Apple’s sandbox is made up of components both in user space and in the kernel. Kernel components “<a href="https://patents.google.com/patent/US20130283344">increase security and provide an efficient mechanism</a>”. The following graphic and text gives an overview of some of these components and their interactions.</p>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_tour/architecture.svg" alt="Overview: Sandboxing Architecture on macOS" />
<figcaption aria-hidden="true">Overview: Sandboxing Architecture on macOS</figcaption>
</figure>
<p>It is important to understand that <strong>neither profiles written in SBPL nor the entitlements a program has are the <em>actual</em> sandbox security policy enforced at runtime</strong>. Instead, <code>libsandbox</code> (1) is responsible for <em>compiling</em> a sandbox profile for the application, which is then passed through the kernel (3) to the <code>Sandbox.kext</code> kernel extension (4) for enforcement. During runtime, this kernel extension interacts with <code>sandboxd</code> (2) for logging.</p>
<p>macOS’s XNU kernel contains a port of TrustedBSD’s <em>mandatory access control</em> (MAC) framework, which notifies so-called <em>policy modules</em> whenever monitored functionality is accessed by processes.
<code>Sandbox.kext</code> is one such policy module. It registers itself with the MAC framework on startup and is subsequently consulted whenever one of hundreds of monitored system calls is executed by a sandboxed program. Prior to executing the actual system call, hooks from the MAC framework call out to all registered policy modules. Each policy module can inspect the arguments and the current system state to decide whether the operation should proceed or not. If a single policy module denies an operation, the corresponding operating is cancelled and an error message is returned to the calling process (<a href="https://dl.packetstormsecurity.net/papers/general/apple-sandbox.pdf">h/t</a> <a href="https://twitter.com/justdionysus">@dion</a>).</p>
<p><code>Sandbox.kext</code> queries the compiled sandbox profile to check whether requested operations are allowed. The sandbox additionally supports so called <em>dynamic extensions</em>. As the name implies, these are capabilities dynamically added and removed from an application’s sandbox during its runtime. For instance, if a user drags-and-drops a file into an application, the application’s sandbox is automatically extended to allow access to this file. I did not look at dynamic extensions in more detail in my thesis.</p>
<h3 id="sandboxing-lifecycle">Sandboxing Lifecycle</h3>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_tour/lifecycle.svg" alt="Overview: Sandboxing Lifecycle" />
<figcaption aria-hidden="true">Overview: Sandboxing Lifecycle</figcaption>
</figure>
<p>As was already touched upon in the Threat Model, applications on macOS <em>always</em> start out non-sandboxed. During their lifetime, they can <em>become</em> sandboxed. Once sandboxed, an application cannot remove the restrictions again. There are two different ways for applications to end up sandboxed:</p>
<ol type="1">
<li>Given a textual SBPL sandboxing policy, programs can explicitly call <code>sandbox_init</code> or one of its variants to impose a sandbox on itself. This can be done at any point during the lifetime of a program and is completely voluntary. Though more powerful than using entitlements, it is significantly harder to configure, in addition to being deprecated and completely unsupported. Only <a href="https://www.google.com/search?q=site:opensource.apple.com+%22sandbox_init%22">Apple-internal daemons</a>, as well as complex third-party software such as <a href="https://hg.mozilla.org/mozilla-central/file/tip/security/sandbox/mac/SandboxPolicyContent.h">Mozilla’s Firefox</a> and <a href="https://www.chromium.org/developers/design-documents/sandbox/osx-sandboxing-design">Chromium</a> make use of this technique.</li>
<li>If the code signature of the program contains entitlements configuring the sandbox, <code>dyld</code>, the dynamic linker, initialises the sandbox before control is passed to the program’s entry point. Sandbox initialisation in this way is involuntary in the sense that apps have no say in the matter. For an in-depth walkthrough of how this works, check out <a href="https://geosn0w.github.io/A-Long-Evening-With-macOS's-Sandbox/">this article</a> and refer to <a href="https://github.com/0xbf00/libsecinit">my own reverse-engineered</a> <code>libsystem_secinit.dylib</code>, which reimplements part of puzzle. The App Sandbox is mandated for apps from the Mac App Store. Usually, if third party apps outside the store are sandboxed, they also use this technique.</li>
</ol>
<h2 id="a-closer-look-at-libsandbox">A Closer Look at <code>libsandbox</code></h2>
<p>No matter whether the app makes use of the App Sandbox or uses the legacy sandboxing interface, at one point <code>libsandbox</code> will be invoked to compile the security profile for the application. Conceptually, this library does two different things, though they overlap in the actual implementation. Firstly, the library contains a custom Scheme interpreter based on <code>TinySCHEME</code>, modified to handle the full SBPL language. Secondly, it contains functionality to produce (<em>“compile”</em>) the sandbox bytecode for use by the sandbox’s kernel component.</p>
<p>For applications using the legacy <code>sandbox_init</code> sandboxing interface directly, <code>libsandbox</code> is provided with a textual sandboxing profile written in a mixture of SBPL and Scheme. The library’s embedded interpreter <em>evaluates</em> (i.e. <em>executes</em>) this profile because, as described previously, SBPL profiles can contain arbitrary Scheme code that <em>generates sandbox rules during evaluation</em>. Recall the two <em>different</em> SBPL snippets shown previously that <em>resulted in identical bytecode</em>. The final ruleset generated during evaluation is then serialised and output in the opaque binary format.</p>
<p>The ability to dynamically generate sandbox rules using Scheme code forms the foundation of the <em>App Sandbox</em>, which is used by the vast majority of applications. Here, <code>libsandbox</code> is invoked by the private <code>AppSandbox</code> framework, which first collects a number of inputs for <code>libsandbox</code>:</p>
<ol type="1">
<li><em>Entitlements</em>: These are extracted from the code signature of the application</li>
<li><em>Additional Parameters</em>: Values such as an app’s bundle identifier and the path to the user’s home directory. These might be referenced by <em>sandbox snippets</em> (see below) during evaluation.</li>
<li><em>Sandbox Snippets</em>: A list of SBPL profiles to evaluate, the most important one being the abstract <code>application.sb</code> application sandboxing base profile. In addition, some of Apple’s frameworks require custom sandbox rules to function properly. These rules are specified in a <code>.sb</code> file as part of the framework bundle. When an application links against such a framework, the corresponding sandbox snippet is included in the list, too.</li>
</ol>
<figure>
<img src="https://ubrigens.com/assets/images/sandbox_tour/libsandbox_flow.svg" alt="Overview: Inner Workings of libsandbox" />
<figcaption aria-hidden="true">Overview: Inner Workings of <code>libsandbox</code></figcaption>
</figure>
<p>Profile compilation for the App Sandbox is slightly more complicated compared to the legacy sandboxing mechanism. Starting out, <code>libsandbox</code> makes entitlements and additional parameters available to SBPL profiles (scripts) it evaluates. It then starts by evaluating <code>application.sb</code> (referred to as <em>“abstract base profile”</em> in the graphic). This profile, which you can find on your system under <code>/System/Library/Sandbox/Profiles/application.sb</code>, dynamically generates sandbox rules while taking into account supplied entitlements and parameters. As shown in the graphic for example, the <code>(allow device-microphone)</code> sandbox rule is only emitted if the application possesses one of the sanctioned entitlements. Similarly, the profile references the user’s home directory (supplied as part of the /additional parameters/) using the <code>param</code> function to emit correct paths for the user’s machine. Lastly, each additional SBPL snippet is evaluated, building the final list of sandbox rules (referred to in the graphic as <em>“concrete app profile”</em>). Note that while the graphic shows the <em>concrete app profile</em> as consisting of human-readable SBPL rules, this is a simplification. In reality the rules are encoded in complex data structures within <code>libsandbox</code>, which are finally <em>compiled</em> into the opaque binary format for <code>Sandbox.kext</code> to use.</p>
<p>I motivated this post by saying that sandboxing’s effectiveness depends on proper configuration. To decide whether <em>anything</em> is proper or not, you need to be able to look at (<em>audit</em>) it. Can you be sure what rules complex Scheme code will generate? Do you know what each entitlement <em>actually does</em> to your sandbox? To answer these questions, you would need access to a human-readable version of the <em>actual sandbox profile</em>. Unfortunately, there is no such thing on macOS. You have to trust the system “just works”.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Should You Use Film Infrared Cleaning? (Digital ICE)</title>
    <link href="https://ubrigens.com/posts/digital_ice.html" />
    <id>https://ubrigens.com/posts/digital_ice.html</id>
    <published>2017-07-18T00:00:00Z</published>
    <updated>2017-07-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        Should You Use Film Infrared Cleaning? (Digital ICE)
        <span class="date">July 18, 2017</span>
    </h2>
    <p>Short answer: <strong>Yes</strong>. For a practical example, play around with the slider at the bottom.</p>
<hr />
<p>Digital ICE has been around for a long time. According to Wikipedia <a href="https://en.wikipedia.org/wiki/Digital_ICE">[1]</a>, the technique is originally from the 1960s, but nowadays is often found in film negative scanners. Different manufacturers have used the same underlying tech for the past ten years. Apart from <em>Digital ICE</em>, you might therefore have a scanner which features <em>Magic Touch</em> or Canon’s <em>FARE</em>. While the exact implementations are almost guaranteed to differ, they all use an additional infrared lamp to scan negative film with. Dust and scratches can be detected reliably for standard color film using this method, but due to the different structure of black and white film, the technique does not work here.</p>
<p>After the scan, when dust and scratches have been detected by the scanner, it is now up to the scanning software to replace these <em>faulty</em> places with content that essentially looks more pleasing to the human eye. Because these changes are done only where defects have been detected, the method does not affect the overall image quality negatively. Filling “holes” in images with computer generated content is called <em>inpainting</em> and also has been around for quite some time <a href="https://www.youtube.com/watch?v=1DoCQMelAMM">[2,</a> <a href="https://www.microsoft.com/en-us/research/product/computational-photography-applications/image-composite-editor/">3]</a>. More advanced versions of this technique have made it into Adobe’s Photoshop (“Content Aware Fill”), but your scanning program likely implements their own technique. Unfortunately, I’ve yet to find a way to use Photoshop’s “Content Aware Fill” to fixup my negatives. Still, <strong>you should definitely be using Digital ICE</strong> (or related technology).</p>
<p>Below you’ll find a before-after comparison of a recent photo I scanned. The negative itself is well over 20 years old. On the left hand side you see what happens if you scan with <em>Infrared cleaning</em> turned off, on the right hand side with <em>Infrared cleaning</em> set to <em>Light</em> (I’m using VueScan for these experiments!).</p>
<p>Manually retouching the photo would take <em>hours</em>.</p>
<p>Note: Using Digital ICE or similar techniques does not mean you should not clean your negatives properly before scanning. The cleaner your negatives are, the less content has to be replaced by algorithms.</p>
<!--html_preserve-->
<div class="slide-comparison">
<img src="https://ubrigens.com/assets/images/cat_clean.jpg">
<div class="resized">
<img src="https://ubrigens.com/assets/images/cat_littered.jpg">
</div>
<div class="divider">

</div>
</div>
<!--/html_preserve-->
<script src="https://ubrigens.com/assets/js/image-comparison-slider.min.js"></script>
</div>
]]></summary>
</entry>
<entry>
    <title>Papers - January 2016</title>
    <link href="https://ubrigens.com/posts/papers_january16.html" />
    <id>https://ubrigens.com/posts/papers_january16.html</id>
    <published>2016-01-11T00:00:00Z</published>
    <updated>2016-01-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        Papers - January 2016
        <span class="date">January 11, 2016</span>
    </h2>
    <p>Second installment of the <em>Papers</em> series. Be sure to read <a href="https://ubrigens.com/posts/papers_september.html">the first one</a> from a couple of months ago!</p>
<p><a href="http://arxiv.org/pdf/1511.07528v1.pdf">&gt; <strong>The Limitations of Deep Learning in Adversarial Settings</strong> (2015)</a></p>
<blockquote>
<p><em>Adversarial samples</em> are samples produced in such way that they differ minimally from beneign samples. Even though humans still correctly classify them, a DNN fails and produces class labels controlled by the adversary. Well written, <em>understandable</em> paper. Impressive.</p>
</blockquote>
<p><a href="http://www.ieee-security.org/TC/SPW2014/papers/5103a140.PDF">&gt; <strong>Mind your language(s): A discussion about languages and security</strong> (2014)</a></p>
<blockquote>
<p>LangSec is a hugely important part of InfoSec that does not currently receive the attention it deserves. Absence of type-checking, (implicit) casts and overloading all constitute possible security problems that need to be carefully addressed. The paper is full of interesting tidbits, quotes and rather amusing vulnerabilities (Try to <em>rm</em> a file called <em>-rf</em> for instance).</p>
</blockquote>
<p><a href="https://www.cs.columbia.edu/~smb/papers/GoingBright.pdf">&gt; <strong>Going Bright: Wiretapping without Weakening Communications Infrastructure</strong> (2013)</a></p>
<blockquote>
<p>“Taking advantage of [existing vulnerabilities] is far preferable to introducing new vulnerabilities into other applications or infrastructure […]”. Better, yes, but not <em>good</em>. <a href="http://www.reuters.com/article/us-cybersecurity-nsa-flaws-insight-idUSKCN0SV2XQ20151107">Also somewhat related.</a></p>
</blockquote>
<p><a href="https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-kemerlis.pdf">&gt; <strong>ret2dir: Rethinking Kernel Isolation</strong> (2014)</a></p>
<blockquote>
<p>Interesting, practical paper doing useful research. The authors, which were also nominated for a <a href="http://pwnies.com/nominations/">Pwnie</a>, also released all source code.</p>
</blockquote>
<p><a href="http://www.mysmu.edu/phdis2008/yqcheng.2008/ROPecker-NDSS14.pdf">&gt; <strong>ROPecker: A Generic and Practical Approach for Defending Against ROP Attacks</strong> (2014)</a></p>
<blockquote>
<p>Cool research on ROP attack mitigations. Does not modify the binary - neither on disk or at runtime - and is thus much more suited to general application. Unfortunately only protects user-space code and there are a few ways to bypass the techniques. Fortunately, these techniques greatly increase the cost of an adversary, reducing the likelyhood you will fall victim to an attack.</p>
</blockquote>
<p><a href="https://ubrigens.com#TODO#">&gt; <strong>Protecting Android Apps Against Reverse Engineering by the Use of the Native Code</strong> (2015)</a></p>
<blockquote>
<p>The authors propose techniques to raise efforts needed to reverse engineer Android applications by introducing <em>one</em> native function responsible for field accesses, method call indirection and opaque predicates. Not a huge fan, considering the performance (and therefore <em>battery</em>) impact is on the order of 10x to 30x.</p>
</blockquote>
<p>Also worth reading:</p>
<ul>
<li><a href="https://www.iseclab.org/papers/cutwail-LEET11.pdf"><strong>The Underground Economy of Spam: A Botmaster’s Perspective of Coordinating Large-Scale Spam Campaigns</strong> (2011)</a></li>
<li><a href="https://people.csail.mit.edu/mrub/papers/ObstructionFreePhotograpy_SIGGRAPH2015.pdf"><strong>A Computational Approach for Obstruction-Free Photography</strong> (2015)</a></li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Papers - September 2015</title>
    <link href="https://ubrigens.com/posts/papers_september.html" />
    <id>https://ubrigens.com/posts/papers_september.html</id>
    <published>2015-09-10T00:00:00Z</published>
    <updated>2015-09-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        Papers - September 2015
        <span class="date">September 10, 2015</span>
    </h2>
    <p>I am starting a new series on this site, where I comment on papers I read in the last few weeks. I intend to publish these articles bimonthly!</p>
<p><a href="https://www.iseclab.org/papers/beagle.pdf">&gt; <strong>Lines of Malicious Code: Insights Into the Malicious Software Industry</strong> (2012)</a></p>
<blockquote>
<p>Some interesting techniques but almost no usable results: Malware changes over time, but remains stable for large periods of time. Who would have thought that binary matching and diffing were hard and you trade off speed versus accuracy? The bottom line is: malware changes just as normal software does, adding approximately 100-300 LoC on average in each new version.</p>
</blockquote>
<p><a href="https://users.ece.cmu.edu/~tdumitra/public_documents/bilge12_zero_day.pdf">&gt; <strong>Before We Knew It - An Empirical Study of Zero-Day Attacks In The Real World</strong> (2012)</a></p>
<blockquote>
<p>The paper uses surprisingly simple tactics to achieve its result, which is the identification of 18 zero-day attacks - of which 11 were unknown at the time of publication - from more or less publicly available data (Symantec’s WINE dataset).</p>
</blockquote>
<blockquote>
<p>Some of the more interesting tidbits are these:</p>
</blockquote>
<blockquote>
<ul>
<li>A ‘typical zero-day attack’ lasts 312 days on average</li>
<li>10% of security patches have bugs of their own (Check out <a href="https://xuanwulab.github.io/2015/08/27/Poking-a-Hole-in-the-Patch/">[1,</a> <a href="http://blog.exodusintel.com/2015/08/13/stagefright-mission-accomplished/">2]</a> for recent examples)</li>
<li>The number of attacks increase 2 - 100 000 times after the public disclosure of vulnerabilites</li>
</ul>
</blockquote>
<p><a href="https://www.cs.indiana.edu/~minaxi/pubs/acsac12-vv.pdf">&gt; <strong>Twitter Games: How Successful Spammers Pick Targets</strong> (2012)</a></p>
<blockquote>
<p>Spammers use Twitter with varying degree of success. Spam tacts evolve quickly and are hard to analyse automatically. Ratelimiting and, more generally, costs associated with the modern Twitter API result in studies that work on very small data sets and are thus not really representative. Since the article is a couple of years old, chances are the findings are irrelevant by now. Be sure to check out related works if you are interested in the topic.</p>
</blockquote>
<p><a href="https://www.iseclab.org/papers/vanity_cracks_malware_ccs2012.pdf">&gt; <strong>Vanity, Cracks and Malware - Insights into the Anti-Copy Protection Ecosystem</strong> (2012)</a></p>
<blockquote>
<p>Surprise! Cracks are used by criminals to spread malware! The original source - dubbed the <em>scene</em> - is mostly fine and has mechanisms to deal with malicious or faulty uploads (which result in what’s called a <em>NUKE</em>). Instead, the intermediate distribution steps such as OCH, BitTorrent or even Usenet, allow parties unrelated to the original warez groups to attach their own malicious software.</p>
</blockquote>
<blockquote>
<ul>
<li>The authors could be the only people to ever purchase a <a href="http://letitbit.net">Letitbit</a> premium account</li>
<li><em>AVG free</em> apparently was at some point a <em>state of the art</em> AV</li>
<li>Authors speculate that they could have found <em>0-day malware</em>, because they found new samples.</li>
<li>Even though their AV reported 2/3 of all files to be infected, only 13.33% actually infected the host. This is what’s called a <em>false positive</em>, and is most likely not because the malicious code did not manage to persist, as the authors seem to assume.</li>
</ul>
</blockquote>
<blockquote>
<p>The article highlights the need for users to be able to verify the integrity of a certain crack or keygen downloaded through untrusted channels. To this end, it might be useful for release groups to sign their releases. The exact infrastructure to support this endeavor could be as simple as using PGP.</p>
</blockquote>
<p><a href="https://eprint.iacr.org/2015/767.pdf">&gt; <strong>Dual EC: A Standardized Back Door</strong> (2015)</a></p>
<blockquote>
<p>Offers interesting views behind the scenes of the Dual EC standardization effort. Be sure to also check out Schneier’s paper <a href="https://eprint.iacr.org/2015/097.pdf">“Surreptitiously Weakening Cryptographic Systems”</a>, as well as <a href="https://projectbullrun.org/dual-ec/">Project Bullrun</a>, the project’s website containing lots of referenced documents.</p>
</blockquote>
<p><a href="http://arxiv.org/pdf/1509.00459v1.pdf">&gt; <strong>Visualizing signatures of human activity in cities across the globe</strong> (2015)</a></p>
<blockquote>
<p>What the hell is that font? Short and sweet paper, though it’s <a href="http://www.manycities.org/">interactive web counterpart</a> is much more exciting.</p>
</blockquote>
</div>
]]></summary>
</entry>
<entry>
    <title>Demystifying iOS App Cracking</title>
    <link href="https://ubrigens.com/posts/demystifying_app_cracking.html" />
    <id>https://ubrigens.com/posts/demystifying_app_cracking.html</id>
    <published>2015-06-16T00:00:00Z</published>
    <updated>2015-06-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        Demystifying iOS App Cracking
        <span class="date">June 16, 2015</span>
    </h2>
    <p>This article is not a guide on how to crack iOS applications. It merely tries to explain the techniques used to circumvent the iOS DRM system. I do not in any way condone piracy.</p>
<hr />
<p>iOS apps come in packages with the filename extension <em>.ipa</em>. These packages are just renamed zip archives, and can easily be unpacked using appropriate tools. The resulting directory tree is of little interest to us here and has been documented elsewhere <a href="https://en.wikipedia.org/wiki/.ipa_(file_extension)">[1,</a> <a href="https://www.theiphonewiki.com/wiki/IPA_File_Format">2]</a>.</p>
<p>For a cracker the most interesting file is the executable, which can be found by inspecting the <code>Info.plist</code> file, specifically be looking up the value for the <code>CFBundleExecutable</code> key. Today, most binaries contain code for multiple architectures. Such files are called <em>fat</em> binaries, stemming from the fact that they contain code for multiple architectures like <em>ARMv7</em>, <em>ARMv7s</em> and <em>ARM64</em> (also known as <em>ARMv8</em>). On the Mac, the same concept is used, but the code inside such binaries typically targets Intel’s 32- and 64-bit processors.</p>
<p>At runtime, the dynamic linker (almost always <em>dyld</em>) will examine the file, determine the best architecture to run, process all load commands and then proceeds to execute the chosen slice. More information on the file format - <em>MachO</em> - and information on the various load commands can be found on Apple’s website <a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachORuntime/index.html">[3]</a>.</p>
<figure>
<img src="https://ubrigens.com/assets/images/blackbox_decryption.svg" alt="Architecture selection at runtime" />
<figcaption aria-hidden="true">Architecture selection at runtime</figcaption>
</figure>
<p>Essentially, the OS kernel can be treated as a black box that automatically decrypts part of the supplied binary - The part that runs <em>best</em> on the available hardware. In this case, <code>posix_spawn</code> was chosen to launch the process, but any other similar function will do. To simplify things, the figure ignores the fact that only the decrypted portion is present in memory after launch.</p>
<p>On iOS, all third-party code must be code-signed by a valid developer ID. The code signature is specified as a load command just after the MachO header, so each <em>slice</em> - rather than the whole fat binary - has its own code signature. The signature is validated by the kernel, and apps with an invalid signature are killed immediately. On non-jailbroken devices, the integrity of the application bundle is ensured by the OS. On jailbroken devices, most of an apps’ contents are allowed to change, since critical security features are gone. Still, a code signature must be present for code to run - however, in this case, a pseudo signatures like those produced by <em>jtool</em> and <em>ldid</em> suffice.</p>
<p>Popular cracking tools such as <em>Clutch</em> <a href="https://github.com/KJCracks/Clutch">[4]</a> use an ugly workaround to crack as many slices of an iOS binary as possible:
Let’s say an app contains code for all three architectures mentioned above. <em>Clutch</em> is then going to patch the header of the executable three times, each time forcing the operating system to execute a different slice. Obviously this only works if the device can execute the slice, meaning that an iPhone 6 can be used to create cracks containing decrypted copies of all three architectures, whereas an iPhone 4S can only decrypt the <em>ARMv7</em> portion.</p>
<p>Here is the process visualized. Again, the device in question is an iPhone 5.</p>
<figure>
<img src="https://ubrigens.com/assets/images/clutch.svg" alt="Clutch on iPhone 5" />
<figcaption aria-hidden="true">Clutch on iPhone 5</figcaption>
</figure>
<p>In this case, the original binary contains three slices for different architectures. Because we are on iPhone 5 which uses a <em>ARMv7s</em> compatible CPU, normally only the corresponding slice would be executed. <em>Clutch</em> abuses the fact that ARM processors are generally backwards compatible, meaning devices capable of running <em>ARMv7s</em> code can also execute <em>ARMv7</em> code. In total, <em>Clutch</em> executes the app twice, once for each supported architecture. In order to force the operating system to execute a specific slice, all other slices are set to contain Intel code.</p>
<p>Each slice is dumped by first spawning the new process using <code>posix_spawn</code> in a suspended state. This is accomplished by using the Apple only flag <code>POSIX_SPAWN_START_SUSPENDED</code>. No code by the application is ever executed, but the slice in question is automatically decrypted by the OS. Next, after aquiring the mach port for the spawned process using <code>task_for_pid</code>, its memory is copied to disk. Lastly, headers are patched where necessary (for example the <code>LC_ENCRYPTION_COMMAND</code> needs to be updated to reflect the fact that the new binary is no longer encrypted) and the processing of the next slice begins. If you are interested in the implementation details, check out the source code <a href="https://github.com/KJCracks/Clutch">[4]</a>.</p>
<p>Finally, the decrypted pieces are combined into a new binary. Because the iPhone 5 does not support <em>ARM64</em>, the output only contains two slices. Still, the binary runs on iPhone 6 - albeit possibly a tiny bit slower.</p>
<p>It is important for developers to understand how this process works. Although the public opinion is largely shaped by discussions about piracy, there are also legitimate uses for app cracking: Penetration testers looking for vulnerabilities in a clients’ app or developers working on <em>reproducible builds</em> <a href="https://github.com/WhisperSystems/Signal-iOS/issues/641">[5]</a>. There are profound implications for what I’ve written in here when we take into consideration <em>App Thinning</em> and <em>Bitcode</em>.<del>, which will be the topic of my next article! Stay tuned!</del></p>
<p>I am not going to get around to write an entire article on this topic, so here is the gist of it:</p>
<p><em>App Thinning</em> results in binaries that only contain one architecture, forcing crackers to use multiple devices to crack each individual slice and then manually combine them to create a version that runs on as many devices as possible. <em>Bitcode</em> on the other hand could allow Apple to create personalized versions of apps, allowing them to trace accounts that distribute cracked versions of an app (fittingly referred to as <em>traitor tracing</em>).
If used, both technologies will hopefully reduce the impact of application cracking on the revenue of iOS developers.</p>
<hr />
<p>Changelog:</p>
<ul>
<li>June 17, 2015: Fixed date, changed title to better reflect the contents of this article.</li>
<li>September 10, 2015: Added disclaimer, added section on impact of <em>App Thinning</em> and <em>Bitcode</em> in iOS 9</li>
<li>November 1, 2018: Updated parts of the article.</li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Origins</title>
    <link href="https://ubrigens.com/posts/origins.html" />
    <id>https://ubrigens.com/posts/origins.html</id>
    <published>2015-04-28T00:00:00Z</published>
    <updated>2015-04-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
    <h2>
        Origins
        <span class="date">April 28, 2015</span>
    </h2>
    <p>This is my personal site, where I mostly write about
fun little projects related to information security.</p>
<p>Content sprinkled in between could also be related
to Haskell, C, or the myriad of tools useful for
reverse engineering.</p>
<p>The design of this site is pretty much stolen from
<a href="http://raysohn.com">Raymond Sohn</a>. Once upon a
time, his site featured more content than the
three dots you find there now. Ray, I don’t know
what happened to you, but I hope you are OK!
Thank you for lending me your design. I am sure it would have taken at least another year before
something appeared on here otherwise.</p>
</div>
]]></summary>
</entry>

</feed>
